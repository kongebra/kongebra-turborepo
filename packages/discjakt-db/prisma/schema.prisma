generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["filteredRelationCount"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Store {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String    @default("")
  imageUrl    String    @default("") @db.VarChar(255)
  baseUrl     String
  sitemapUrl  String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  slug        String    @unique
  products    Product[]
}

model Product {
  id          Int            @id @default(autoincrement())
  loc         String         @unique @db.VarChar(255)
  lastmod     String
  title       String
  description String
  imageUrl    String         @db.VarChar(255)
  isDisc      Boolean?
  storeId     Int
  discId      Int?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  latestPrice Float          @default(0)
  disabled    Boolean        @default(false)
  disc        Disc?          @relation(fields: [discId], references: [id])
  store       Store          @relation(fields: [storeId], references: [id])
  prices      ProductPrice[]
  plasticId   Int?
  plastic     Plastic?       @relation(fields: [plasticId], references: [id])
  confirmed   Boolean        @default(false)
}

model ProductPrice {
  id        Int      @id @default(autoincrement())
  amount    Float
  currency  String
  productId Int
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id])
}

model Brand {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  url         String
  imageUrl    String    @db.VarChar(255)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  slug        String    @unique
  discs       Disc[]
  Plastic     Plastic[]
}

model Disc {
  id              Int                 @id @default(autoincrement())
  name            String
  description     String
  imageUrl        String              @db.VarChar(255)
  speed           Float
  glide           Float
  turn            Float
  fade            Float
  brandId         Int
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  type            String
  slug            String              @unique
  views           Int                 @default(0)
  outOfProduction Boolean             @default(false)
  brand           Brand               @relation(fields: [brandId], references: [id])
  products        Product[]
  users           UserDiscFavorites[]
}

model Plastic {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  slug        String    @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  brand       Brand     @relation(fields: [brandId], references: [id])
  brandId     Int
  products    Product[]
}

model UserDiscFavorites {
  discId Int
  userId String
  disc   Disc   @relation(fields: [discId], references: [id])
  User   User   @relation(fields: [userId], references: [id])

  @@id([discId, userId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String              @id @default(cuid())
  name          String?
  email         String?             @unique
  emailVerified DateTime?
  image         String?             @db.VarChar(255)
  role          String              @default("user")
  accounts      Account[]
  sessions      Session[]
  favorites     UserDiscFavorites[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
